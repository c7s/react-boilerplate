{
    // Don't use parent config
    "root": true,
    // Can't be overridden, so it's here
    "extends": [
        "airbnb",
        "plugin:@typescript-eslint/recommended",
        "prettier",
        "prettier/@typescript-eslint",
        "prettier/react"
    ],
    "rules": {
        // Requires in js code are fine
        "@typescript-eslint/no-var-requires": "off",
        // Every dependency is dev dependency in frontend
        "import/no-extraneous-dependencies": [
            "error",
            { "devDependencies": true, "optionalDependencies": true, "peerDependencies": true }
        ],
        "no-use-before-define": ["error", "nofunc"],
        "@typescript-eslint/no-use-before-define": ["error", "nofunc"],
        "no-console": ["error", { "allow": ["warn", "error", "info", "groupCollapsed", "groupEnd"] }],
        "capitalized-comments": ["error", "always", { "ignorePattern": "tslint|webpackChunkName" }],
        "no-restricted-imports": [
            "error",
            {
                "paths": [
                    {
                        "name": "react-router-hash-link",
                        "message": "Use common/Link."
                    },
                    {
                        "name": "use-react-router",
                        "message": "Use common/lib/routes/useReactRouter."
                    },
                    {
                        "name": "react-responsive-modal",
                        "message": "Use common/Modal."
                    }
                ]
            }
        ]
    },
    "overrides": [
        {
            "files": ["**/*.ts", "**/*.tsx"],
            "settings": {
                "import/resolver": {
                    "node": {
                        "extensions": [".ts", ".tsx", ".d.ts", ".js"]
                    }
                }
            },
            "plugins": ["@typescript-eslint", "react-hooks"],
            "parser": "@typescript-eslint/parser",
            "parserOptions": {
                "project": "./tsconfig.json"
            },
            "rules": {
                // Bring back disabled rule
                "@typescript-eslint/no-var-requires": "error",
                // Empty interfaces for Props are convenient
                "@typescript-eslint/no-empty-interface": "off",
                // Unavoidable in some cases
                "@typescript-eslint/no-non-null-assertion": "warn",
                // Useless
                "@typescript-eslint/explicit-function-return-type": "off",
                // https://github.com/eslint/typescript-eslint-parser/issues/437
                "no-undef": "off",
                // Enable React Hooks rules
                "react-hooks/rules-of-hooks": "error",
                "react-hooks/exhaustive-deps": "error",
                // Allow JSX in tsx files
                "react/jsx-filename-extension": ["error", { "extensions": [".tsx"] }],
                // Skip undeclared - no need in ts
                "react/prop-types": [
                    "error",
                    {
                        "ignore": [],
                        "customValidators": [],
                        "skipUndeclared": true
                    }
                ],
                // Default export is discouraged
                "import/prefer-default-export": "off",
                "import/no-default-export": "error",
                // Function overrides are fine
                "import/export": "warn",
                // Seems fine in some cases
                "react/destructuring-assignment": "warn",
                // TODO: Ensure consistency between member-ordering and sort-comp
                "@typescript-eslint/member-ordering": [
                    "error",
                    {
                        "default": [
                            "public-static-field",
                            "protected-static-field",
                            "private-static-field",
                            "public-static-method",
                            "protected-static-method",
                            "private-static-method",
                            "public-instance-field",
                            "protected-instance-field",
                            "private-instance-field",
                            "public-constructor",
                            "protected-constructor",
                            "private-constructor",
                            "public-instance-method",
                            "protected-instance-method",
                            "private-instance-method"
                        ]
                    }
                ],
                // Move rendering right after lifecycle
                "react/sort-comp": [
                    "error",
                    {
                        "order": [
                            "static-methods",
                            "instance-variables",
                            "lifecycle",
                            "rendering",
                            "/^on.+$/",
                            "getters",
                            "setters",
                            "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",
                            "instance-methods",
                            "everything-else"
                        ],
                        "groups": {
                            "lifecycle": [
                                "displayName",
                                "propTypes",
                                "contextTypes",
                                "childContextTypes",
                                "mixins",
                                "statics",
                                "defaultProps",
                                "constructor",
                                "getDefaultProps",
                                "getInitialState",
                                "state",
                                "getChildContext",
                                "componentWillMount",
                                "componentDidMount",
                                "componentWillReceiveProps",
                                "shouldComponentUpdate",
                                "componentWillUpdate",
                                "componentDidUpdate",
                                "componentWillUnmount"
                            ],
                            "rendering": ["/^render.+$/", "render"]
                        }
                    }
                ]
            }
        }
    ]
}
